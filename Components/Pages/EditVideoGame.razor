@page "/edit-game"
@page "/edit-game/{Id:int}"
@inject IVideoGameService VideoGameService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false));

@if(Id is null)
{
    <PageTitle>Add a new Video Game</PageTitle>
    <h3>Add a new Video Game</h3>
}
else
{
    <PageTitle>Edit "@CurrentGame.Title"</PageTitle>
    <h3>Edit "@CurrentGame.Title"</h3>
}

<EditForm Model="CurrentGame" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="CurrentGame.Title" class="form-control" />
    </div>
    <div>
        <label for="publisher">Publisher</label>
        <InputText id="publisher" @bind-Value="CurrentGame.Publisher" class="form-control" />
    </div>
    <div>
        <label for="releaseYear">ReleaseYear</label>
        <InputNumber id="releaseYear" @bind-Value="CurrentGame.ReleaseYear" class="form-control" />
    </div>  
    <button type="submit" class="btn btn-primary">Save</button>  
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    public VideoGame CurrentGame { get; set; } = new();
    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var game = await VideoGameService.GetGameByIdAsync((int)Id);
            if (game is not null)
                CurrentGame = game;
        }
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            //update
            await VideoGameService.UpdeteGameAsync(CurrentGame , (int)Id);
            NavigationManager.NavigateTo("/games");
        }
        else
        {
            //Add
            await VideoGameService.AddGameAsync(CurrentGame);
            NavigationManager.NavigateTo("/games");
        }
    }
}